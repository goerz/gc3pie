========================================================================
    INSTALLATION OF `gcodeml`
========================================================================

:Author:   Riccardo Murri <riccardo.murri@gmail.com>
:Date:     2010-07-21
:Revision: $Revision$


.. This file follows reStructuredText markup syntax; see
   http://docutils.sf.net/rst.html for more information


Installation
============

These instructions show how to install the ``gcodeml`` script from the
GC3 svn repository into its own python environment.

0. Install software prerequisites: 
   
   * On Debian/Ubuntu, install packages: ``subversion``,
     ``python-dev``, ``python-profiler`` and the C/C++ compiler::
     
       apt-get install subversion python-dev python-profiler gcc g++

   * On CentOS5, install packages ``subversion`` and ``python-devel``
     and the C/C++ compiler::

       yum install subversion python-devel gcc gcc-c++

   * On other Linux distributions, you will need to install:
     - the ``svn`` command (from the SubVersion_ VCS)
     - Python development headers and libraries (for installing 
       extension libraries written in C/C++)
     - the Python package ``pstats`` (it's part of the Python
       standard library, but it's sometimes installed separately)
     - a C/C++ compiler (this is usually installed by default).

1. If it's not already installed, get the `virtualenv` Python package
   and install it::

      wget http://bitbucket.org/ianb/virtualenv/get/tip.gz#egg=virtualenv-tip
      tar -xzf tip.tar.gz && rm tip.tar.gz 
      cd virtualenv/
 
    If you are installing as `root`, the following command is all you
    need::

      python setup.py install

    If instead you are installing as a normal, unprivileged user,
    things get more complicated::

      export PYTHONPATH=$HOME/lib/python:$PYTHONPATH
      export PATH=$PATH:$HOME/bin
      mkdir -p $HOME/lib/python
      python setup.py install --home $HOME

    (You will also need to add the two `export` lines above to the
    `$HOME/.bashrc` file, if using the `bash` shell, or to the
    `$HOME/.cshrc` file, if using the `tcsh` shell.)

    In any case, once `virtualenv` has been installed, you can exit
    its directory and remove it::
   
      cd ..
      rm -rf virtualenv


2. Create a virtualenv to host the ``gcodeml`` installation::

       virtualenv gcodeml
       cd gcodeml/
       source bin/activate

    You can name the ``gcodeml`` virtualenv anything you like, as
    long as it is a valid UNIX dictory name and contains no spaces.
    If, for instance, you are installing both the "trunk" and a
    release version of ``gcodeml``, then it might make
    sense to use a name like gcodeml-vX.Y instead.


3. Check-out the ``gc3pie`` sources in a ``src/`` directory::
     
       svn co http://gc3pie.googlecode.com/svn/trunk/gc3pie src
   
  
4. Install the ``gc3pie`` in "develop" mode, so any modification
   pulled from subversion is immediately reflected in the running
   environment::

       cd src/
       env CC=gcc ./setup.py develop 


5. Create symlinks to the ``gcodeml`` script in the
   ``bin/`` directory::

       cd .. # back into the `gcodeml` directory
       ln -s `pwd`/src/gc3apps/codeml/gcodeml.py bin/gcodeml


   
Upgrade
=======

These instructions show how to upgrade the ``gcodeml`` script to the
latest version found in the GC3 svn repository.

1. `cd` to the directory containing the `gcodeml` virtualenv;
   assuming it's named ``gcodeml`` as in the above installation
   instructions, you can issue the commands::

     cd gcodeml/src

2. Update the ``gc3pie`` source and run the ``setup.py`` script again:

     svn update
     env CC=gcc ./setup.py develop



.. (for Emacs only)
..
  Local variables:
  mode: rst
  End:
